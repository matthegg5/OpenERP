// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenERP.ErpDbContext.Models;

#nullable disable

namespace OpenERP.Migrations
{
    [DbContext(typeof(OpenERPContext))]
    partial class OpenERPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Address", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ReferenceTable")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("ForeignKeyId")
                        .HasColumnType("int")
                        .HasColumnName("ForeignKeyID");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Address3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("City")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("CountryNum")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId", "ReferenceTable", "ForeignKeyId", "AddressId");

                    b.ToTable("Address", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId");

                    b.ToTable("Company", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Customer", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId", "CustomerId");

                    b.ToTable("Customer", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Part", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("PartNum")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("DefaultUomcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("DefaultUOMCode")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("PartDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("SerialTracked")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId", "PartNum");

                    b.ToTable("Part", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.PartRev", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("PartNum")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("PartRevNum")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ApprovedUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartRevDesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId", "PartNum", "PartRevNum");

                    b.ToTable("PartRev", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.PurchaseOrderDtl", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("PurchaseOrderNum")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderLineNum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("LastChangeUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LineDesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValueSql("('')");

                    b.Property<decimal>("OurOrderQty")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("OurUomcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("OurUOMCode")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("PartNum")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("SupplierOrderQty")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("SupplierUomcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("SupplierUOMCode")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId", "PurchaseOrderNum", "PurchaseOrderLineNum");

                    b.ToTable("PurchaseOrderDtl", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.PurchaseOrderHed", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("PurchaseOrderNum")
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedByUserID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("LastChangeUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("CompanyId", "PurchaseOrderNum");

                    b.HasIndex("CompanyId", "SupplierId");

                    b.ToTable("PurchaseOrderHed", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.PurchaseOrderRel", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("PurchaseOrderNum")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderLineNum")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderRelNum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("LastChangeUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OurOrderQty")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("OurUomcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("OurUOMCode")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("SupplierOrderQty")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("SupplierUomcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("SupplierUOMCode")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId", "PurchaseOrderNum", "PurchaseOrderLineNum", "PurchaseOrderRelNum");

                    b.ToTable("PurchaseOrderRel", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.SalesOrderDtl", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("SalesOrderNum")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderLineNum")
                        .HasColumnType("int");

                    b.Property<string>("LineDesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValueSql("('')");

                    b.Property<decimal>("LineQty")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("PartNum")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("SalesUom")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("SalesUOM")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("SolineComments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SOLineComments")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId", "SalesOrderNum", "SalesOrderLineNum");

                    b.HasIndex("CompanyId", "PartNum");

                    b.ToTable("SalesOrderDtl", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.SalesOrderHed", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("SalesOrderNum")
                        .HasColumnType("int");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("BillingAddressID");

                    b.Property<bool>("CancelledOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerPonum")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CustomerPONum")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("CustomerRequiredDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("OpenOrder")
                        .HasColumnType("bit");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingAddressID");

                    b.Property<DateTime?>("SuggestedShipDate")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyId", "SalesOrderNum");

                    b.HasIndex("CompanyId", "CustomerId");

                    b.ToTable("SalesOrderHed", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.SalesOrderRel", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("SalesOrderNum")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderLineNum")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderRelNum")
                        .HasColumnType("int");

                    b.Property<decimal>("ReleaseQty")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime?>("RequiredByDate")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyId", "SalesOrderNum", "SalesOrderLineNum", "SalesOrderRelNum");

                    b.ToTable("SalesOrderRel", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Supplier", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId", "SupplierId");

                    b.ToTable("Supplier", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Uomcode", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Uomcode1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("UOMCode")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Uomdescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("UOMDescription")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CompanyId", "Uomcode1");

                    b.ToTable("UOMCode", "Erp");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyList")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenERP.ErpDbContext.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Address", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_AddressCompany");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Customer", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerCompany");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Part", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("Parts")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Part_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.PartRev", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("PartRevs")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_PartRev_Company");

                    b.HasOne("OpenERP.ErpDbContext.Models.Part", "Part")
                        .WithMany("PartRevs")
                        .HasForeignKey("CompanyId", "PartNum")
                        .IsRequired()
                        .HasConstraintName("FK_PR_Part");

                    b.Navigation("Company");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.PurchaseOrderDtl", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("PurchaseOrderDtls")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_POD_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.PurchaseOrderHed", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("PurchaseOrderHeds")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_POH_Company");

                    b.HasOne("OpenERP.ErpDbContext.Models.Supplier", "Supplier")
                        .WithMany("PurchaseOrderHeds")
                        .HasForeignKey("CompanyId", "SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_POH_Supplier");

                    b.Navigation("Company");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.PurchaseOrderRel", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("PurchaseOrderRels")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_POR_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.SalesOrderDtl", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Part", "Part")
                        .WithMany("SalesOrderDtls")
                        .HasForeignKey("CompanyId", "PartNum")
                        .IsRequired()
                        .HasConstraintName("FK_SOD_Part");

                    b.HasOne("OpenERP.ErpDbContext.Models.SalesOrderHed", "SalesOrderHed")
                        .WithMany("SalesOrderDtls")
                        .HasForeignKey("CompanyId", "SalesOrderNum")
                        .IsRequired()
                        .HasConstraintName("FK_SOD_SOHed");

                    b.Navigation("Part");

                    b.Navigation("SalesOrderHed");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.SalesOrderHed", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("SalesOrderHeds")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_SOH_Company");

                    b.HasOne("OpenERP.ErpDbContext.Models.Customer", "C")
                        .WithMany("SalesOrderHeds")
                        .HasForeignKey("CompanyId", "CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_SOH_Customer");

                    b.Navigation("C");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.SalesOrderRel", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("SalesOrderRels")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_SOR_Company");

                    b.HasOne("OpenERP.ErpDbContext.Models.SalesOrderDtl", "SalesOrderDtl")
                        .WithMany("SalesOrderRels")
                        .HasForeignKey("CompanyId", "SalesOrderNum", "SalesOrderLineNum")
                        .IsRequired()
                        .HasConstraintName("FK_SOR_SODtl");

                    b.Navigation("Company");

                    b.Navigation("SalesOrderDtl");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Supplier", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("Suppliers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Supplier_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Uomcode", b =>
                {
                    b.HasOne("OpenERP.ErpDbContext.Models.Company", "Company")
                        .WithMany("Uomcodes")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_UOM_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Customers");

                    b.Navigation("PartRevs");

                    b.Navigation("Parts");

                    b.Navigation("PurchaseOrderDtls");

                    b.Navigation("PurchaseOrderHeds");

                    b.Navigation("PurchaseOrderRels");

                    b.Navigation("SalesOrderHeds");

                    b.Navigation("SalesOrderRels");

                    b.Navigation("Suppliers");

                    b.Navigation("Uomcodes");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Customer", b =>
                {
                    b.Navigation("SalesOrderHeds");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Part", b =>
                {
                    b.Navigation("PartRevs");

                    b.Navigation("SalesOrderDtls");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.SalesOrderDtl", b =>
                {
                    b.Navigation("SalesOrderRels");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.SalesOrderHed", b =>
                {
                    b.Navigation("SalesOrderDtls");
                });

            modelBuilder.Entity("OpenERP.ErpDbContext.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseOrderHeds");
                });
#pragma warning restore 612, 618
        }
    }
}
